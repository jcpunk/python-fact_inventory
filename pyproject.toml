[project]
name = "fact-inventory"
version = "0.0.1"
license = "GPL 3+"
description = "Store facts about a system in a database"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
  "advanced-alchemy>=1.6.3",
  "dotenv>=0.9.9",
  "litestar[sqlalchemy,standard]>=2.17.0",
  "pydantic>=2.11.9",
  "sqlalchemy[aiosqlite,asyncio,postgresql-asyncpg]>=2.0.43",
]

[dependency-groups]
dev = [
  "httpx>=0.28.1",
  "mypy>=1.18.2",
  "pre-commit>=4.3.0",
  "pytest-asyncio>=1.2.0",
  "pytest>=8.4.2",
  "ruff>=0.13.2"
]

[tool.mypy]
disable_bytearray_promotion = true
disable_memoryview_promotion = true
files = "app"
ignore_missing_imports = true
show_error_codes = true
strict = true
warn_unused_ignores = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "session"

[tool.ruff]
fix = true
src = ["app", "test"]

[tool.ruff.lint]
extend-select = [
  "A",     # detect shadowed builtins
  "ARG",   # unused-arguments
  "ASYNC", # async
  "B",     # flake8-bugbear
  "C4",    # Catch incorrect use of comprehensions, dict, list, etc
  "COM",   # enforce trailing comma rules
  "DTZ",   # require strict timezone manipulation with datetime
  "E",     # PyCodeStyle errors
  "F",     # Pyflakes rules
  "FA",    # Verifies files use from __future__ import annotations if a type is used in the module that can be rewritten using PEP 563.
  "FBT",   # detect boolean traps
  "G",     # Better usage of built-in logging
  "I",     # isort - Import sorting
  "ICN",   # Use common import conventions
  "ISC",   # Good use of string concatenation
  "LOG",   # Checks for issues using the standard library logging module.
  "N",     # enforce naming conventions, e.g. ClassName vs function_name
  "PL",    # pylint
  "PTH",   # Use pathlib instead of os.path
  "PYI",   # Linting rules for type annotations.
  "Q",     # Linting rules for quites
  "RET",   # Good return practices
  "RUF",   # Ruff specific lint rules
  "S",     # bandit
  "SIM",   # flake8-simplify
  "TC",    # Enforce importing certain types in a TYPE_CHECKING block
  "TCH",   # Move type only imports to type-checking condition.
  "TID",   # Helps you write tidier imports.
  "TRY",   # tryceratops - track exception handeling
  "UP",    # pyupgrade - Warn if certain things can changed due to newer Python versions
  "W"      # PyCodeStyle warnings
]
ignore = [
  "COM812", # de-dupe trailing commas
  "SIM108", # ternary is ugly
  "S101",   # test cases use assert
  "TID252"  # I actually like relative imports for webapps
]
